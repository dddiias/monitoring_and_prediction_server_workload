from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from keyboards.inline import get_help_menu, get_main_inline_menu

router = Router()

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_entry(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üìñ <b>–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:",
        reply_markup=get_help_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "help_connect")
async def help_connect(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üìç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´üìç –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä¬ª\n"
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ <code>telegraf.conf</code> –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n\n"
        "üì• –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞—á–Ω—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Telegraf.\n\n",
        reply_markup=get_help_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "help_metrics")
async def help_metrics(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üìä –ú–µ—Ç—Ä–∏–∫–∏</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üìä –ú–µ—Ç—Ä–∏–∫–∏¬ª, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É CPU –∏ –ø–∞–º—è—Ç–∏.\n\n"
        "–ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º Telegraf.\n",
        reply_markup=get_help_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "help_forecast")
async def help_forecast(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏</b>\n\n"
        "–í –±—É–¥—É—â–µ–º –±–æ—Ç –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (LSTM, ARIMA –∏ —Ç.–ø.).\n"
        "–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–Ω–µ–µ –≤–∏–¥–µ—Ç—å –ø–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏!\n",
        reply_markup=get_help_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "help_myservers")
async def help_myservers(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üìÑ –ú–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìÑ –ú–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã¬ª, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Ä–∞–Ω–µ–µ.\n\n"
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ\n‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n‚Ä¢ –î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω\n\n"
        "–≠—Ç–æ —É–¥–æ–±–Ω–æ, –µ—Å–ª–∏ –≤—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–æ–≤.\n",
        reply_markup=get_help_menu(),
        parse_mode="HTML"
    )
    await callback.answer()
